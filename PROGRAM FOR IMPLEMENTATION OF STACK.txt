PROGRAM FOR IMPLEMENTATION OF STACK USING ARRAY:

#include <iostream>
using namespace std;

class Stack {
private:
    int maxSize;
    int top;
    int* stackArray;

public:
    Stack(int size) {
        maxSize = size;
        top = -1;
        stackArray = new int[maxSize];
    }

    ~Stack() {
        delete[] stackArray;
    }

    bool isEmpty() {
        return top == -1;
    }

    bool isFull() {
        return top == maxSize - 1;
    }

    void push(int data) {
        if (isFull()) {
            cout << "Stack is full. Cannot push more elements." << endl;
            return;
        }

        stackArray[++top] = data;
        cout << data << " pushed into the stack." << endl;
    }

    void pop() {
        if (isEmpty()) {
            cout << "Stack is empty. Cannot pop from an empty stack." << endl;
            return;
        }

        cout << stackArray[top--] << " popped from the stack." << endl;
    }

    int peek() {
        if (isEmpty()) {
            cout << "Stack is empty." << endl;
            return -1;
        }
        return stackArray[top];
    }
};

int main() {
    int size;
    cout << "Enter the size of the stack: ";
    cin >> size;

    Stack stack(size);

    int choice, data;
    while (true) {
        cout << "Stack Operations:\n";
        cout << "1. Push\n";
        cout << "2. Pop\n";
        cout << "3. Peek\n";
        cout << "4. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter the element to push: ";
                cin >> data;
                stack.push(data);
                break;
            case 2:
                stack.pop();
                break;
            case 3:
                cout << "Top of the stack: " << stack.peek() << endl;
                break;
            case 4:
                cout << "Exiting the program." << endl;
                return 0;
            default:
                cout << "Invalid choice. Please try again." << endl;
        }
    }

    return 0;
}


OUTPUT OF PROGRAM:
Enter the size of the stack: 10
Stack Operations:
1. Push
2. Pop
3. Peek
4. Exit
Enter your choice: 1
Enter the element to push: 10
10 pushed into the stack.
Stack Operations:
1. Push
2. Pop
3. Peek
4. Exit
Enter your choice: 2
10 popped from the stack.
Stack Operations:
1. Push
2. Pop
3. Peek
4. Exit
Enter your choice: 3
Stack is empty.
Top of the stack: -1
Stack Operations:
1. Push
2. Pop
3. Peek
4. Exit
Enter your choice: 4
Exiting the program.