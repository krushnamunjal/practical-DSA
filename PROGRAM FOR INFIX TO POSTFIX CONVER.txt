PROGRAM FOR INFIX TO POSTFIX CONVERSION:

#include <iostream>
#include <stack>
#include <string>

using namespace std;

// Function to check if a character is an operator
bool isOperator(char c) {
    return (c == '+' || c == '-' || c == '*' || c == '/');
}

// Function to get the precedence of an operator
int getPrecedence(char op) {
    if (op == '+' || op == '-')
        return 1;
    if (op == '*' || op == '/')
        return 2;
    return 0;
}

// Function to convert infix expression to postfix expression
string infixToPostfix(const string& infix) {
    stack<char> operators;
    string postfix;
    
    for (char token : infix) {
        if (isalnum(token)) {
            postfix += token; // Append operands to the postfix expression
        }
        else if (token == '(') {
            operators.push(token);
        }
        else if (token == ')') {
            while (!operators.empty() && operators.top() != '(') {
                postfix += operators.top();
                operators.pop();
            }
            operators.pop(); // Pop the '('
        }
        else if (isOperator(token)) {
            while (!operators.empty() && getPrecedence(operators.top()) >= getPrecedence(token)) {
                postfix += operators.top();
                operators.pop();
            }
            operators.push(token);
        }
    }
    
    while (!operators.empty()) {
        postfix += operators.top();
        operators.pop();
    }
    
    return postfix;
}

int main() {
    string infix;
    
    cout << "Enter an infix expression: ";
    getline(cin, infix);
    
    string postfix = infixToPostfix(infix);
    
    cout << "Postfix expression: " << postfix << endl;
    
    return 0;
}

OUTPUT OF PROGRAM:
Enter an infix expression: ((A+B)*(C-D)/E
Postfix expression: AB+CD-*E/(