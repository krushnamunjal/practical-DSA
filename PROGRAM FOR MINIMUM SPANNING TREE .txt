// PROGRAM FOR MINIMUM SPANNING TREE USING PRIMS ALGORITHM:

#include <iostream>
#include <vector>
#include <queue>
#include <climits>

using namespace std;

class Graph {
public:
    Graph(int vertices);
    void addEdge(int v, int w, int weight);
    void primMST();

private:
    int vertices;
    vector<vector<pair<int, int>>> adjacencyList; // pair<vertex, weight>
};

Graph::Graph(int vertices) {
    this->vertices = vertices;
    adjacencyList.resize(vertices);
}

void Graph::addEdge(int v, int w, int weight) {
    adjacencyList[v].emplace_back(w, weight);
    adjacencyList[w].emplace_back(v, weight); // For undirected graph
}

void Graph::primMST() {
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
    vector<int> key(vertices, INT_MAX);
    vector<int> parent(vertices, -1);
    vector<bool> inMST(vertices, false);

    // Start with the first vertex
    int startVertex = 0;
    pq.push({0, startVertex});
    key[startVertex] = 0;

    while (!pq.empty()) {
        int u = pq.top().second;
        pq.pop();

        inMST[u] = true;

        for (const auto &neighbor : adjacencyList[u]) {
            int v = neighbor.first;
            int weight = neighbor.second;

            if (!inMST[v] && weight < key[v]) {
                key[v] = weight;
                parent[v] = u;
                pq.push({key[v], v});
            }
        }
    }

    // Print the Minimum Spanning Tree
    cout << "Edges in the Minimum Spanning Tree:" << endl;
    for (int i = 1; i < vertices; ++i) {
        cout << "Edge: " << parent[i] << " - " << i << " Weight: " << key[i] << endl;
    }
}

int main() {
    Graph g(6);

    g.addEdge(0, 1, 4);
    g.addEdge(0, 2, 3);
    g.addEdge(1, 2, 1);
    g.addEdge(1, 3, 2);
    g.addEdge(2, 3, 4);
    g.addEdge(3, 4, 2);
    g.addEdge(4, 5, 6);

    g.primMST();

    return 0;
}

/* OUTPUT FOR PROGRAM:
Edges in the Minimum Spanning Tree:
Edge: 2 - 1 Weight: 1
Edge: 0 - 2 Weight: 3
Edge: 1 - 3 Weight: 2
Edge: 3 - 4 Weight: 2
Edge: 4 - 5 Weight: 6 */